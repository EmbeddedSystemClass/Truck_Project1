discVL_notes.txt

LED3 - green
LED4 - blue

USART1 - 	PA9 TX		printHexByte1()	- 7200
			PA10 RX
			
USART2 -	PA2 TX		printHexByte2()	- AVR (LCD)
			PA3 RX
			
USART3 -	PB10 TX
			PB11 RX
			
DS1620 pins: (PORTB)
DS1620_PIN_DQ	GPIO_PIN_0
DS1620_PIN_CLK	GPIO_PIN_1
DS1620_PIN_RST	GPIO_PIN_2

PA1 - ADC channel 1

keypad:
col0		PC0		(inputs)
col1		PC1
col2		PC2
col3		PC3

row0		PB15	(outputs)
row1		PB14
row2		PB13
row3		PB12

serial port connections on FPGA:
tx_uart		P34
rx_uart		P36
data_ready	P24
cmd_param	P30
data_sent	P28

serial port connections on STM32:
PA4 DataReady
PA5 CmdParam
PA6 DataSent
PB10 TX		(USART3)
PB11 RX

STM32				FPGA
PA4		-->			P24		- DataReady
PA5		-->			P30		- CmdParam
PA6		<--			P28		- DataSent
PB10	-->			P36		- USART
PB11	<--			P34		- USART

StartAVRTask() waits for a SendAVRQueueHandle message.
Any task sending a SendAVRQueueHandle message will
pack an 8-byte UCHAR array into a uint64_t which is
send to the queue handle. Use pack64() to byte shift
the UCHAR array into the uint64_t. The first byte of
the UCHAR array is the command which ends up in the
lowest significant byte of the uint64_t.

in the DefaultTask, wait for the global var: key_mode
to change from either NORMAL, PASSWORD or NUM_ENTRY
and suspend the current task and resume the appropriate
one. 

StartDefaultTask()		-	does basic setup
StartBasicCmdTask()		-	get keypresses and process - mostly sending msg to 7200 task
StartKeyStateTask()		-	state machine for keypad
StartDS1620Task()		-	read data from DS1620
StartTask7200()			-	recv msg's for 7200 and send to USART 1
StartAVRTask()			-	get msg's to be sent to AVR (LCD screen)
StartRecv7200()			-	get cmd's from 7200 and process: mostly display on screen
StartSendFPGA()			-	send cmd's to FPGA over USART3
StartRecvFPGA()			-	recv data from FPGA
StartTask10()			-	available
StartNumEntryTask()		-	handles numeric key entry used to set values
Callback01()			-	does 1 sec timing

tune player:
up to 7 different predefined tunes are in memory
each tune is 2 different arrays of:
1) channel 1 note
2) channel 2 note

other params are:
duty cycle
length of each note
how many notes in the tune
