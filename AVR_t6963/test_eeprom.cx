// for some reason minicom doesn't write on this box (192.168.42.110)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/time.h>

//#define BAUDRATE B9600
#define BAUDRATE B19200
//#define BAUDRATE B115200
#define MODEMDEVICE "/dev/ttyS0"
#define _POSIX_SOURCE 1 /* POSIX compliant source */
#define FALSE 0
#define TRUE 1
#define LEN 100
#define TIME_DELAY 5000
#define EEPROM_SIZE 1024

typedef unsigned char UCHAR;
typedef unsigned int UINT;
typedef unsigned char uint8_t;

int set_interface_attribs (int fd, int speed, int parity);
void set_blocking (int fd, int should_block);
void get_target_seq(int fd,int type);
void print_menu(void);

//volatile int STOP=FALSE; 

int set_interface_attribs (int fd, int speed, int parity)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tcgetattr", errno);
				perror(" ");
                return -1;
        }

        cfsetospeed (&tty, speed);
        cfsetispeed (&tty, speed);

        tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;     // 8-bit chars
        // disable IGNBRK for mismatched speed tests; otherwise receive break
        // as \000 chars
        tty.c_iflag &= ~IGNBRK;         // disable break processing
        tty.c_lflag = 0;                // no signaling chars, no echo,
                                        // no canonical processing
        tty.c_oflag = 0;                // no remapping, no delays
        tty.c_cc[VMIN]  = 0;            // read doesn't block
        tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout

        tty.c_iflag &= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl

        tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
                                        // enable reading
        tty.c_cflag &= ~(PARENB | PARODD);      // shut off parity
        tty.c_cflag |= parity;
        tty.c_cflag &= ~CSTOPB;
        tty.c_cflag &= ~CRTSCTS;

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
        {
                printf ("error %d from tcsetattr", errno);
				perror(" ");
                return -1;
        }
        return 0;
}

void set_blocking (int fd, int should_block)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tggetattr", errno);
                perror(" ");
                return;
        }

        tty.c_cc[VMIN]  = should_block ? 1 : 0;
        tty.c_cc[VTIME] = 50;            // 0.5 seconds read timeout

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
                printf ("error %d setting term attributes", errno);
}


int main(int argc, char argv[])
{
	int fd,c, res, res2;
	int i,j,k;
	UCHAR ret_char;
	char ch;
	struct termios oldtio,newtio;
	unsigned char buf[LEN];
	memset(&newtio, 0, sizeof newtio);
	char filename[20];
	UCHAR eeprom_sim[1024];
	int fp;

	fd = open (MODEMDEVICE, O_RDWR | O_NOCTTY | O_SYNC);
	if (fd <0) {perror(MODEMDEVICE); 
		exit(-1); }


	if(tcgetattr(fd,&oldtio) != 0) /* save current port settings */
	{
		printf("Error from tcgetattr: %d ",errno);
		close(fd);
		exit(1);
	}

	set_interface_attribs (fd, BAUDRATE, 0);
	set_blocking (fd, 1);
	ch = '*';

	for(i = 0;i < 92;i++)
		printf("*");
	printf("\n");

	if(argc < 2)
		strcpy(filename,"eeprom.bin\0");
	else
		strcpy(filename,argv[1]);
		
	if(access(filename,F_OK) != -1)
	{
		fp = open((const char *)filename, O_RDWR);
		if(fp < 0)
		{
			printf("can't open file for writing\n");
			exit(1);
		}else
		{
			res = 0;
			lseek(fp,0,SEEK_SET);
//							for(i = start_addr;i < size;i++)
			res = read(fp,eeprom_sim,EEPROM_SIZE);
			close(fp);
			printf("reading part into eeprom_sim\n");
		}
	}

	j = 0;
	for(i = 0;i < 300;i++)
	{
		if(eeprom_sim[i] > 0x1f && eeprom_sim[i] < 0x73)
		{
			printf("%c",eeprom_sim[i]);
			if(++j > 40)
			{
				printf("\n");
				j = 0;
			}
		}
	}
	printf("\n");	
	for(i = 300;i < 1023;i++)
	{
		printf("%2x ",eeprom_sim[i]);
		if(++j > 30)
		{
			printf("\n");
			j = 0;
		}
	}
	printf("\n");	

	res2 = 0;
	ch = 0x30;

	print_menu();
	do
	{
		ch = getchar();
//		printf("%c\n",ch);
		switch(ch)
		{
			case 'a':
				printf("writing to eeprom...\n");
	
				res = 0;
				write(fd,&ch,1);
				for(i = 0;i < EEPROM_SIZE;i++)
				{
					res += write(fd,&eeprom_sim[i],1);
					usleep(1000);
				}
				printf("wrote %d bytes\n",res);	
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
				
//				get_target_seq(fd,1);
			break;

			case 'b':
				write(fd,&ch,1);
				ch = 0;
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
//				get_target_seq(fd,1);
			break;

			case 'c':
				write(fd,&ch,1);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
//				get_target_seq(fd,1);
			break;

			case 'd':
				write(fd,&ch,1);
				j = 0;
				for(i = 0;i < EEPROM_SIZE;i++)
				{
					printf("%2x ",eeprom_sim[i]);
					if(++j > 30)
					{
						printf("\n");
						j = 0;
					}
				}
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
//				get_target_seq(fd,1);
			break;

			case 'e':
				write(fd,&ch,1);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
//				get_target_seq(fd,1);
			break;

			case 'f':
				write(fd,&ch,1);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
//				get_target_seq(fd,1);
			break;

			case 'g':
				write(fd,&ch,1);
				read(fd,&ret_char,1);
				printf("%x \n",ret_char);
				ch = 0;
//				get_target_seq(fd,1);
			break;

			case 'h':
				print_menu();
				ch = 0;
			break;

			case 'j':
				write(fd,&ch,1);
				printf("clear screen\n");
				ch = 0;
			break;

			default:
				printf("huh?\n");
			break;
		}

	}while(ch != 'q');
	
	ch = 0xff;
	write(fd,(void *)&ch,1);
	tcsetattr(fd,TCSANOW,&oldtio);
	close(fd);
	printf("\ndone\n");
	exit(0);
}


void get_target_seq(int fd,int type)
{
	UCHAR ret;
	int i;
	i = 0;
	do
	{
		ret = read(fd,&ret,1);
		if(type == 0)
		{
			printf("%c",ret);
			if(++i > 93)
				printf("\n");
		}			
		else
		{
			printf("%2x ",ret);
			if(++i > 30)
				printf("\n");
		}
	}while(ret != 0xFF);
}

void print_menu(void)
{
	printf("a - send eeprom image to target\n");
	printf("b - burn image to target using update_byte\n");
	printf("c - burn image to target using update_block\n");
	printf("d - display eeprom image sent from target\n");
	printf("e - tell target to diplay pattern 1\n");
	printf("f - tell target to diplay pattern 2\n");
	printf("g - tell target to diplay pattern 3\n");
	printf("h - print help\n");
	printf("j - clear screen\n");
	printf("k - set size\n");
	printf("l - set start_addr\n");
	printf("q - quit\n");	
}
